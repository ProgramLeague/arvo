data bad := in : (bad -> bad) -> bad.

check in.

check bad_elim.

def out : bad -> (bad -> bad) :=
  \b : bad.
    bad_elim (\_ : bad. bad -> bad) (\x : bad -> bad. x) b.

check out.

def False : Type := (A : Type) -> A.

def worse : bad := (in (\x : bad. out x x)).

check (out worse worse).

simpl (out worse worse).

check ((\ x : bad. ((out x) x))
       (in (\ x : bad. ((out x) x)))).

simpl ((\ x : bad. ((out x) x))
       (in (\ y : bad. ((out y) y)))).
