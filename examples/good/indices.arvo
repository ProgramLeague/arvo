data nat := O | S : nat -> nat.

def plus : nat -> nat -> nat :=
  \n. \m.
    nat_elim (\_. nat)
      m
      (\_. S)
    n
  .

data even : nat -> Type :=
| even_O : even O
| even_SS : (n : nat) -> even n -> even (S (S n)).

data vec (A : Type) : nat -> Type :=
| v_nil : vec A O
| v_cons : (n : nat) -> (a : A) -> vec A n -> vec A (S n).

check vec_elim.

def vec_append : (A : Type) ->
                 (n : nat) -> vec A n ->
                 (m : nat) -> vec A m ->
                 vec A (plus n m) :=
  \A. \n. \u. \m. \v.
    vec_elim A (\z. \_. vec A (plus z m))
      v
      (\n. \h. \t. \rec : vec A (plus n m).
       v_cons A (plus n m) h rec)
      n
      u
  .

def one : nat := S O.
def two : nat := S one.
def three : nat := S two.
def four : nat := S three.
def five : nat := S four.
def six : nat := S five.

def x : vec nat three :=
    v_cons nat two O   (
    v_cons nat one one (
    v_cons nat O   two (
    v_nil nat))).

def xx : vec nat six :=
    v_cons nat five  O   (
    v_cons nat four  one (
    v_cons nat three two (
    v_cons nat two   O   (
    v_cons nat one   one (
    v_cons nat O     two (
    v_nil nat)))))).


simpl x.
simpl (vec_append nat three x three x).
simpl xx.
simpl (v_cons nat O O (v_nil nat)).

data eq (A : Type) (a : A) : A -> Type :=
| eq_refl : eq A a a.

check eq_elim.

def subst : (A : Type) -> (P : A -> Type) ->
            (a : A) -> P a ->
            (b : A) ->
            eq A a b -> P b :=
  \A. \P. \a.
    eq_elim A a (\z. \_. P z)
  .

def foo : eq (vec nat six) xx (vec_append nat three x three x) :=
  eq_refl (vec nat six) xx.
