import prelude.
import equality.

data bool := true | false.

def if : (A : Type) -> bool -> A -> A -> A :=
  \A. \b. \t. \f.
    bool_elim (\_. A)
              t
              f
              b.

def notb : bool -> bool :=
  \x. if bool x false true.

def true_false_inv : eq bool true false -> False :=
  \H. subst bool
            (\z. if Type z True False)
            true
            I
            false
            H.

def false_true_inv : eq bool false true -> False :=
  \H. true_false_inv (eq_sym bool false true H).

def notb_true : (x : bool) -> eq bool (notb x) true -> eq bool x false :=
  \x.
    bool_elim (\z. eq bool (notb z) true -> eq bool z false)
              (\H. exfalso (false_true_inv H) (eq bool true false))
              (\_. refl bool false)
              x.

def andb : bool -> bool -> bool :=
  \x. \y.
    if bool x y false.

def orb : bool -> bool -> bool :=
  \x. \y.
    if bool x true y.


def eqb_bool : bool -> bool -> bool :=
  \x. \y.
    if bool x y (notb y).


def eqb_bool_sound : (x y : bool) -> eq bool (eqb_bool x y) true -> eq bool x y :=
  \x. \y.
    bool_elim (\z. eq bool (eqb_bool z y) true -> eq bool z y)
              (\H. eq_sym bool (eqb_bool true y) true H)
              (\H. eq_sym bool y false (notb_true y H))
              x.

def eqb_bool_refl : (x : bool) -> eq bool (eqb_bool x x) true :=
  \x.
    bool_elim (\z. eq bool (eqb_bool z z) true)
              (refl bool true)
              (refl bool true)
              x.
