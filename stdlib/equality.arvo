data eq (A : Type) (a : A) : A -> Type :=
| refl : eq A a a.
check eq : (A : Type) -> A -> A -> Type.
check eq.

check refl : (A : Type) -> (a : A) -> eq A a a.
check refl.

def subst : (A : Type) -> (P : A -> Type) ->
            (a : A) -> P a ->
            (b : A) ->
            eq A a b -> P b :=
  \A. \P. \a.
    eq_elim A a (\z. \_. P z)
  .

check subst : (A : Type) -> (P : A -> Type) -> (a : A) -> P a -> (b : A) -> eq A a b -> P b.
check subst.

def subst_compute : (A : Type) -> (P : A -> Type) -> (a : A) -> (pf : P a) ->
                    eq (P a) (subst A P a pf a (refl A a)) pf :=
  \A. \P. \a. \pf.
    refl (P a) pf
  .
check subst_compute.

def J : (A : Type) -> (P : (a : A) -> (b : A) -> eq A a b -> Type) ->
        (a : A) -> P a a (refl A a) -> (b : A) -> (pf : eq A a b) -> P a b pf :=
  \A. \P. \a.
    eq_elim A a (\z. \pf. P a z pf)
  .
check J.

def eq_sym : (A : Type) -> (a b : A) -> eq A a b -> eq A b a :=
    \A : Type. \a : A. \b : A. \pf : eq A a b.
     subst A (\x : A. eq A x a) a (refl A a) b pf.
check eq_sym.
print eq_sym.

def eq_trans : (A : Type) -> (a b c : A) ->
               eq A a b -> eq A b c -> eq A a c :=
    \A. \a. \b. \c.
      \ab.
        subst A (\x. eq A x c -> eq A a c) a (\y. y) b ab.
check eq_trans.
print eq_trans.

def f_equal : (A B : Type) -> (f : A -> B) -> (x y : A) ->
              eq A x y -> eq B (f x) (f y) :=
  \A. \B. \f. \x. \y. \H.
    subst A (\z. eq B (f x) (f z)) x (refl B (f x)) y H.
check f_equal.
print f_equal.

def rewrite : (A : Type) -> (P : A -> Type) -> (a : A) -> P a -> (b : A) ->
              eq A b a -> P b :=
  \A. \P. \a. \pa. \b. \Heq.
    subst A P a pa b (eq_sym A b a Heq).

def fun_cong : (A B : Type) ->
               (f g : A -> B) -> eq (A -> B) f g ->
               (x y : A) -> eq A x y ->
               eq B (f x) (g y) :=
  \A. \B. \f. \g. \Hfg. \x. \y. \Hxy.
    rewrite (A -> B)
            (\z. eq B (z x) (g y))
            g
            (f_equal A B g x y Hxy)
            f
            Hfg.

def f_equal2 : (A B C : Type) ->
               (f : A -> B -> C) ->
               (a1 a2 : A) -> eq A a1 a2 ->
               (b1 b2 : B) -> eq B b1 b2 ->
               eq C (f a1 b1) (f a2 b2) :=
  \A. \B. \C.
  \f.
  \a1. \a2. \Ha.
  \b1. \b2. \Hb.
    fun_cong B C
      (f a1) (f a2) (f_equal A (B -> C) f a1 a2 Ha)
      b1 b2 Hb.

def f_equal3 : (A B C D : Type) -> (f : A -> B -> C -> D) ->
               (a1 a2 : A) -> eq A a1 a2 ->
               (b1 b2 : B) -> eq B b1 b2 ->
               (c1 c2 : C) -> eq C c1 c2 ->
               eq D (f a1 b1 c1) (f a2 b2 c2) :=

  \A. \B. \C. \D.
  \f.
  \a1. \a2. \Ha.
  \b1. \b2. \Hb.
  \c1. \c2. \Hc.
    fun_cong C D
      (f a1 b1) (f a2 b2) (f_equal2 A B (C -> D) f a1 a2 Ha b1 b2 Hb)
      c1 c2 Hc.

