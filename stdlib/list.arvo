import nat. @ implies bool, equality, and prelude @

data list (A : Type) := nil : list A | cons : A -> list A -> list A.

def fold_right : (A B : Type) -> B -> (A -> B -> B) -> list A -> B :=
  \A. \B. \z. \f.
    list_elim A (\_. B) z (\h. \_. \rec. f h rec).

def fold_left : (A B : Type) -> B -> (B -> A -> B) -> list A -> B :=
  \A. \B. \z. \f. \l.
    list_elim A (\_. B -> B) (\acc. acc) (\h. \t. \rec. \acc. rec (f acc h)) l z.


def fold_left_ind : (A B : Type) -> (P : B -> Type) -> (f : B -> A -> B) -> ((b : B) -> (a : A) -> P b -> P (f b a)) -> (l : list A) -> (z : B) -> P z -> P (fold_left A B z f l) :=
  \A. \B. \P. \f. \Pf.
    \l.
      list_elim A (\w. (z : B) -> P z -> P (fold_left A B z f w))
                (\z. \Pz. Pz)
                (\h. \t. \rec : (z : B) -> P z -> P (fold_left A B z f t).
                  \z. \Pz.
                    rec (f z h) (Pf z h Pz))
                l.

def example : list bool := cons bool true (cons bool false (cons bool false (cons bool true (cons bool true (nil bool))))).

def map : (A B : Type) -> (A -> B) -> list A -> list B :=
  \A. \B. \f. \l.
    fold_right A (list B) (nil B) (\h. \rec. cons B (f h) rec) l.

simpl example.

simpl (map bool bool notb example).

def filter : (A : Type) -> (A -> bool) -> list A -> list A :=
  \A. \f. \l.
    fold_right A (list A) (nil A) (\h. \t. if (list A) (f h) (cons A h t) t) l.

simpl (filter bool (\x. x) example).


def app : (A : Type) -> (xs ys : list A) -> list A :=
  \A. \xs. \ys.
    fold_right A (list A) ys (cons A) xs.

def app_nil_r : (A : Type) -> (xs : list A) -> eq (list A) (app A xs (nil A)) xs :=
  \A. \xs.
    list_elim A (\z. eq (list A) (app A z (nil A)) z)
      (refl (list A) (nil A))
      (\h. \t. \IHt.
        f_equal (list A) (list A) (cons A h) (app A t (nil A)) t IHt)
      xs.

def app_assoc : (A : Type) -> (xs ys zs : list A) -> eq (list A) (app A (app A xs ys) zs) (app A xs (app A ys zs)) :=
  \A. \xs. \ys. \zs.
    list_elim A (\z. eq (list A) (app A (app A z ys) zs) (app A z (app A ys zs)))
      (refl (list A) (app A ys zs))
      (\h. \t. \IHt.
        f_equal (list A) (list A) (cons A h)
                (app A (app A t ys) zs) (app A t (app A ys zs)) IHt)
      xs.

def map_app : (A B : Type) -> (f : A -> B) -> (xs ys : list A) -> eq (list B) (map A B f (app A xs ys)) (app B (map A B f xs) (map A B f ys)) :=
  \A. \B. \f. \xs. \ys.
    list_elim A (\z. eq (list B) (map A B f (app A z ys)) (app B (map A B f z) (map A B f ys)))
      (refl (list B) (map A B f ys))
      (\h. \t. \IHt. f_equal (list B) (list B) (cons B (f h)) (map A B f (app A t ys)) (app B (map A B f t) (map A B f ys)) IHt)
      xs
  .

def snoc : (A : Type) -> list A -> A -> list A :=
  \A. \l. \x. app A l (cons A x (nil A)).

def rev : (A : Type) -> list A -> list A :=
  \A. \l.
    fold_right A (list A) (nil A) (\h. \t. snoc A t h) l.

simpl (rev bool example).

def rev_app : (A : Type) -> (xs ys : list A) -> eq (list A) (rev A (app A xs ys)) (app A (rev A ys) (rev A xs)) :=
 \A. \xs. \ys.
   list_elim A (\z. eq (list A) (rev A (app A z ys)) (app A (rev A ys) (rev A z)))
     (eq_sym (list A) (app A (rev A ys) (nil A)) (rev A ys) (app_nil_r A (rev A ys)))
     (\h. \t. \IHt : eq (list A) (rev A (app A t ys)) (app A (rev A ys) (rev A t)).
       rewrite (list A)
         (\z. eq (list A) (snoc A z h) (app A (rev A ys) (snoc A (rev A t) h)))
         (app A (rev A ys) (rev A t))
         (rewrite (list A)
           (\z. eq (list A) z (app A (rev A ys) (snoc A (rev A t) h)))
           (app A (rev A ys) (snoc A (rev A t) h))
           (refl (list A) (app A (rev A ys) (snoc A (rev A t) h)))
           (snoc A (app A (rev A ys) (rev A t)) h)
           (app_assoc A (rev A ys) (rev A t) (cons A h (nil A))))
         (rev A (app A t ys))
         IHt)
     xs.

def rev_snoc : (A : Type) -> (xs : list A) -> (x : A) -> eq (list A) (rev A (snoc A xs x)) (cons A x (rev A xs)) :=
  \A. \xs. \x.
    rev_app A xs (cons A x (nil A)).

def rev_involutive : (A : Type) -> (l : list A) -> eq (list A) (rev A (rev A l)) l :=
  \A. \l.
    list_elim A (\z. eq (list A) (rev A (rev A z)) z)
      (refl (list A) (nil A))
      (\h. \t. \IHt : eq (list A) (rev A (rev A t)) t.
        eq_trans (list A)
          (rev A (snoc A (rev A t) h))
          (cons A h (rev A (rev A t)))
          (cons A h t)
          (rev_snoc A (rev A t) h)
          (f_equal (list A) (list A) (cons A h) (rev A (rev A t)) t IHt))
      l.

def rev_injective : (A : Type) -> (xs ys : list A) -> eq (list A) (rev A xs) (rev A ys) -> eq (list A) xs ys :=
  \A. \xs. \ys. \Hxsys.
    eq_trans (list A)
             xs
             (rev A (rev A xs))
             ys
             (eq_sym (list A) (rev A (rev A xs)) xs (rev_involutive A xs))
             (eq_trans (list A)
                       (rev A (rev A xs))
                       (rev A (rev A ys))
                       ys
                       (f_equal (list A) (list A) (rev A) (rev A xs) (rev A ys) Hxsys)
                       (rev_involutive A ys)).

def map_rev : (A B : Type) -> (f : A -> B) -> (xs : list A) -> eq (list B) (map A B f (rev A xs)) (rev B (map A B f xs)) :=
  \A. \B. \f.
    list_elim A (\z. eq (list B) (map A B f (rev A z)) (rev B (map A B f z)))
      (refl (list B) (nil B))
      (\h. \t. \IHt. eq_trans (list B)
                              (map A B f (snoc A (rev A t) h))
                              (snoc B (map A B f (rev A t)) (f h))
                              (snoc B (rev B (map A B f t)) (f h))
                              (map_app A B f (rev A t) (cons A h (nil A)))
                              (f_equal2 (list B) B (list B) (snoc B)
                                        (map A B f (rev A t)) (rev B (map A B f t)) IHt
                                        (f h) (f h) (refl B (f h))))
  .

data palindromic_list (A : Type) :=
  PL_nil : palindromic_list A
| PL_one : A -> palindromic_list A
| PL_cons : A -> palindromic_list A -> palindromic_list A.

def PL_to_list : (A : Type) -> palindromic_list A -> list A :=
  \A.
    palindromic_list_elim A (\_. list A)
      (nil A)
      (\x. cons A x (nil A))
      (\ends. \middle. \rec. cons A ends (snoc A rec ends))
  .

def PL_to_list_rev : (A : Type) -> (pl : palindromic_list A) -> eq (list A) (rev A (PL_to_list A pl)) (PL_to_list A pl) :=
  \A.
    palindromic_list_elim A (\z. eq (list A) (rev A (PL_to_list A z)) (PL_to_list A z))
      (refl (list A) (nil A))
      (\x. refl (list A) (cons A x (nil A)))
      (\e. \m. \IHm.
        f_equal2 (list A) A (list A) (snoc A)
                 (rev A (snoc A (PL_to_list A m) e))
                 (cons A e (PL_to_list A m))
                 (eq_trans (list A)
                           (rev A (snoc A (PL_to_list A m) e))
                           (cons A e (rev A (PL_to_list A m)))
                           (cons A e (PL_to_list A m))
                           (rev_snoc A (PL_to_list A m) e)
                           (f_equal (list A) (list A) (cons A e)
                                    (rev A (PL_to_list A m)) (PL_to_list A m) IHm))
                 e e (refl A e))

  .


import sig.

def palindrome : (A : Type) -> list A -> Type :=
  \A. \l.
    sigT (palindromic_list A) (\pl. eq (list A) (PL_to_list A pl) l).

def palindrome_nil : (A : Type) -> palindrome A (nil A) :=
  \A.
    existT (palindromic_list A) (\pl. eq (list A) (PL_to_list A pl) (nil A)) (PL_nil A) (refl (list A) (nil A))
  .

def palindrome_singleton : (A : Type) -> (x : A) -> palindrome A (cons A x (nil A)) :=
  \A. \x.
    existT (palindromic_list A) (\pl. eq (list A) (PL_to_list A pl) (cons A x (nil A))) (PL_one A x) (refl (list A) (cons A x (nil A)))
  .

def palindrome_extend : (A : Type) -> (x : A) -> (l : list A) -> palindrome A l -> palindrome A (cons A x (snoc A l x)) :=
  \A. \x. \l. \Hl.
    sigT_elim (palindromic_list A) (\pl. eq (list A) (PL_to_list A pl) l)
      (\_. palindrome A (cons A x (snoc A l x)))
      (\pl. \Hpl : eq (list A) (PL_to_list A pl) l.
        existT (palindromic_list A) (\pl. eq (list A) (PL_to_list A pl) (cons A x (snoc A l x)))
          (PL_cons A x pl)
          (f_equal (list A) (list A) (cons A x)
            (snoc A (PL_to_list A pl) x)
            (snoc A l x)
            (f_equal2 (list A) A (list A) (snoc A)
              (PL_to_list A pl) l Hpl
              x x (refl A x))))
      Hl
  .


def pal_rev : (A : Type) -> (l : list A) -> palindrome A l -> eq (list A) (rev A l) l :=
  \A. \l. \p.
    sigT_elim (palindromic_list A) (\pl. eq (list A) (PL_to_list A pl) l)
      (\_. eq (list A) (rev A l) l)
      (\pl. \Hpl : eq (list A) (PL_to_list A pl) l.
        subst (list A)
              (\z. eq (list A) (rev A z) z)
              (PL_to_list A pl)
              (PL_to_list_rev A pl)
              l
              Hpl)
      p
  .

def length : (A : Type) -> list A -> nat :=
  \A. fold_right A nat O (\_. S).

def length_app : (A : Type) -> (xs ys : list A) -> eq nat (length A (app A xs ys)) (plus (length A xs) (length A ys)) :=
  \A. \xs. \ys.
    list_elim A (\z. eq nat (length A (app A z ys)) (plus (length A z) (length A ys)))
              (refl nat (length A ys))
              (\h. \t. \IHt. f_equal nat nat S (length A (app A t ys)) (plus (length A t) (length A ys)) IHt)
              xs
  .

def length_snoc : (A : Type) -> (xs : list A) -> (x : A) -> eq nat (length A (snoc A xs x)) (S (length A xs)) :=
  \A. \xs. \x.
    list_elim A (\z. eq nat (length A (snoc A z x)) (S (length A z)))
      (refl nat (S O))
      (\h. \t. \IHt.
        f_equal nat nat S (length A (snoc A t x)) (S (length A t)) IHt)
      xs
  .

def length_rev : (A : Type) -> (xs : list A) -> eq nat (length A (rev A xs)) (length A xs) :=
  \A.
    list_elim A (\z. eq nat (length A (rev A z)) (length A z))
      (refl nat O)
      (\h. \t. \IHt.
        (eq_trans nat
          (length A (snoc A (rev A t) h))
          (S (length A (rev A t)))
          (S (length A t))
          (length_snoc A (rev A t) h)
          (f_equal nat nat S (length A (rev A t)) (length A t) IHt)))
  .

def le : nat -> nat -> Type :=
  nat_rec (nat -> Type)
          (\_. True)
          (\rec. \m.
            nat_case_simple Type
              False
              (\mp. rec mp)
              m)
  .

def le_refl : (n : nat) -> le n n :=
  nat_elim (\z. le z z)
    I
    (\n. \IHn. IHn)
  .

def le_trans : (a b c : nat) -> le a b -> le b c -> le a c :=
  nat_elim (\z. (b c : nat) -> le z b -> le b c -> le z c)
    (\b. \c. \Hab. \Hbc. I)
    (\a. \IHa.
      nat_case (\z. (c : nat) -> le (S a) z -> le z c -> le (S a) c)
        (\c. \Hcontra. \_. exfalso Hcontra (le (S a) c))
        (\b.
          nat_case (\z. le (S a) (S b) -> le (S b) z -> le (S a) z)
            (\_. \Hcontra. exfalso Hcontra (le (S a) O))
            (\c. IHa b c)))
  .

def le_n_S : (n : nat) -> le n (S n) :=
  nat_elim (\z. le z (S z))
    I
    (\n. \IHn. IHn)
  .

def le_n_Sm : (n m : nat) -> le n m -> le n (S m) :=
  nat_elim (\z. (m : nat) -> le z m -> le z (S m))
    (\_. \_. I)
    (\n. \IHn : (m : nat) -> le n m -> le n (S m).
     nat_case (\z. le (S n) z -> le n z)
       (\Hcontra. exfalso Hcontra (le n O))
       IHn)
  .

def eq_le : (n m : nat) -> eq nat n m -> le n m :=
  \n. \m.
    rewrite nat (\z. le z m)
      m
      (le_refl m)
      n
  .

def list_case : (A : Type) -> (B : list A -> Type) -> B (nil A) -> ((h : A) -> (t : list A) -> B (cons A h t)) -> (l : list A) -> B l :=
  \A. \B. \n. \c.
    list_elim A (\z. B z)
              n
              (\h. \t. \_. c h t)
  .

def is_cons : (A : Type) -> (l : list A) -> bool :=
  \A. list_case A (\_. bool) false (\_. \_. true).

def cons_nil_inv : (A : Type) -> (h : A) -> (t : list A) -> eq (list A) (cons A h t) (nil A) -> False :=
  \A. \h. \t. \Heq.
    true_false_inv (f_equal (list A) bool (is_cons A) (cons A h t) (nil A) Heq)
  .

def snoc_not_nil : (A : Type) -> (l : list A) -> (x : A) -> eq (list A) (snoc A l x) (nil A) -> False :=
  \A. \l. \x.
    list_case A (\z. eq (list A) (snoc A z x) (nil A) -> False)
      (cons_nil_inv A x (nil A))
      (\h. \t. cons_nil_inv A h (snoc A t x))
      l
  .

def rev_eq_nil : (A : Type) -> (l : list A) -> eq (list A) (rev A l) (nil A) -> eq (list A) l (nil A) :=
  \A. \l.
    list_case A (\z. eq (list A) (rev A z) (nil A) -> eq (list A) z (nil A))
      (\_. refl (list A) (nil A))
      (\h. \t. \Heq. exfalso (snoc_not_nil A (rev A t) h Heq) (eq (list A) (cons A h t) (nil A)))
      l
  .

def cons_inv1 : (A : Type) -> (x y : A) -> (xs ys : list A) ->
                eq (list A) (cons A x xs) (cons A y ys) ->
                eq A x y :=
  \A. \x. \y. \xs. \ys.
    f_equal (list A) A (list_case A (\_. A) x (\h. \_. h))
      (cons A x xs) (cons A y ys)
  .

def cons_inv2 : (A : Type) -> (x y : A) -> (xs ys : list A) ->
                eq (list A) (cons A x xs) (cons A y ys) ->
                eq (list A) xs ys :=
  \A. \x. \y. \xs. \ys.
    f_equal (list A) (list A) (list_case A (\_. list A) (nil A) (\_. \t. t))
      (cons A x xs) (cons A y ys)
  .

def snoc_inv1 : (A : Type) -> (xs ys : list A) -> (x y : A) ->
                eq (list A) (snoc A xs x) (snoc A ys y) ->
                eq (list A) xs ys :=
  \A. \xs. \ys. \x. \y. \H.
    rev_injective A xs ys
      (cons_inv2 A x y (rev A xs) (rev A ys)
        (rev_injective A (cons A x (rev A xs)) (cons A y (rev A ys))
          (rewrite (list A) (\z. eq (list A) (snoc A z x) (snoc A (rev A (rev A ys)) y))
            xs
            (rewrite (list A) (\z. eq (list A) (snoc A xs x) (snoc A z y))
              ys
              H
              (rev A (rev A ys))
              (rev_involutive A ys))
            (rev A (rev A xs))
            (rev_involutive A xs))))
  .

def palindrome_converse : (A : Type) -> (l : list A) -> eq (list A) l (rev A l) -> palindrome A l :=
  \A. \l.
    nat_elim (\z. (l : list A) -> le (length A l) z -> eq (list A) l (rev A l) -> palindrome A l)
      (list_case A (\z. le (length A z) O -> eq (list A) z (rev A z) -> palindrome A z)
                   (\_. \_. palindrome_nil A)
                   (\h. \t. \Hlength : False. \_. exfalso Hlength (palindrome A (cons A h t))))
      (\n. \IHn : (l : list A) -> le (length A l) n -> eq (list A) l (rev A l) -> palindrome A l.
        (list_case A (\z. le (length A z) (S n) -> eq (list A) z (rev A z) -> palindrome A z)
                   (\_. \_. palindrome_nil A)
                   (\h. \t.
                    \Hlength : le (length A t) n.
                    \Hrev : eq (list A) (cons A h t) (rev A (cons A h t)).
                     list_case A (\z. eq (list A) (rev A t) z -> palindrome A (cons A h t))
                       (\Heq : eq (list A) (rev A t) (nil A).
                         rewrite (list A) (\z. palindrome A (cons A h z))
                           (nil A)
                           (palindrome_singleton A h)
                           t
                           (rev_eq_nil A t Heq))
                       (\h2. \t2. \Heq : eq (list A) (rev A t) (cons A h2 t2).
                         (\Ht : eq (list A) t (snoc A (rev A t2) h2).
                           (\Ht2 : eq (list A) (cons A h2 (snoc A t2 h)) (cons A h (snoc A (rev A t2) h2)).
                             (\Hh : eq A h h2.
                               (\Ht2 : eq (list A) t2 (rev A t2).
                                 rewrite (list A) (\z. palindrome A (cons A h z))
                                   (snoc A (rev A t2) h2)
                                   (subst A (\z. palindrome A (cons A h (snoc A (rev A t2) z)))
                                     h
                                     (palindrome_extend A h (rev A t2)
                                       (IHn (rev A t2)
                                         (subst (list A) (\z. le (length A z) n)
                                           t2
                                           (le_trans (length A t2) (length A t) n
                                             (rewrite (list A) (\z. (le (length A t2) (length A z)))
                                               (snoc A (rev A t2) h2)
                                               (rewrite nat (\z. le (length A t2) z)
                                                 (S (length A (rev A t2)))
                                                 (le_n_Sm (length A t2) (length A (rev A t2))
                                                   (eq_le (length A t2) (length A (rev A t2))
                                                     (eq_sym nat (length A (rev A t2)) (length A t2)
                                                       (length_rev A t2))))
                                                 (length A (snoc A (rev A t2) h2))
                                                 (length_snoc A (rev A t2) h2))
                                               t
                                               Ht)
                                             Hlength)
                                           (rev A t2)
                                           Ht2)
                                         (f_equal (list A) (list A) (rev A)
                                           t2 (rev A t2) Ht2)))
                                     h2
                                     Hh)
                                   t
                                   Ht)
                               (snoc_inv1 A t2 (rev A t2) h h2 (cons_inv2 A h2 h (snoc A t2 h) (snoc A (rev A t2) h2) Ht2)))
                             (eq_sym A h2 h (cons_inv1 A h2 h (snoc A t2 h) (snoc A (rev A t2) h2) Ht2)))
                           (eq_sym (list A)
                             (cons A h (snoc A (rev A t2) h2))
                             (cons A h2 (snoc A t2 h))
                             (eq_trans (list A)
                               (cons A h (snoc A (rev A t2) h2))
                               (cons A h t)
                               (cons A h2 (snoc A t2 h))
                               (f_equal (list A) (list A) (cons A h)
                                 (snoc A (rev A t2) h2)
                                 t
                                 (eq_sym (list A) t (snoc A (rev A t2) h2) Ht))
                               (eq_trans (list A)
                                 (cons A h t)
                                 (snoc A (rev A t) h)
                                 (cons A h2 (snoc A t2 h))
                                 Hrev
                                 (f_equal2 (list A) A (list A) (snoc A)
                                   (rev A t) (cons A h2 t2) Heq
                                   h h (refl A h))))))
                         (eq_trans (list A) t (rev A (rev A t)) (rev A (cons A h2 t2))
                           (eq_sym (list A) (rev A (rev A t)) t (rev_involutive A t))
                           (f_equal (list A) (list A) (rev A) (rev A t) (cons A h2 t2) Heq)))
                       (rev A t)
                       (refl (list A) (rev A t)))))
      (length A l)
      l
      (le_refl (length A l))
  .

data subset_list (A : Type) := s_nil : subset_list A | s_cons : A -> bool -> subset_list A -> subset_list A.

def subset_list_superset : (A : Type) -> subset_list A -> list A :=
  \A.
    subset_list_elim A (\_. list A)
      (nil A)
      (\h. \_. \t. \rec. cons A h rec)
  .

def subset_list_subset : (A : Type) -> subset_list A -> list A :=
  \A.
    subset_list_elim A (\_. list A)
      (nil A)
      (\h. \b. \t. \rec.
        if (list A) b (cons A h rec) rec)
  .

def subset : (A : Type) -> list A -> list A -> Type :=
  \A. \xs. \ys.
    sigT (subset_list A) (\s. prod (eq (list A) (subset_list_superset A s) ys) (eq (list A) (subset_list_subset A s) xs))
  .

def list_to_superset : (A : Type) -> (xs : list A) -> subset_list A :=
  \A.
    list_elim A (\_. subset_list A)
      (s_nil A)
      (\h. \t. \rec. s_cons A h false rec)
  .

def list_to_from_superset : (A : Type) -> (xs : list A) ->
                            eq (list A) (subset_list_superset A (list_to_superset A xs)) xs :=
  \A.
    list_elim A (\z. eq (list A) (subset_list_superset A (list_to_superset A z)) z)
      (refl (list A) (nil A))
      (\h. \t. \IHt.
        f_equal (list A) (list A) (cons A h)
          (subset_list_superset A (list_to_superset A t)) t IHt)
  .

def list_to_from_subset : (A : Type) -> (xs : list A) ->
                          eq (list A) (subset_list_subset A (list_to_superset A xs)) (nil A) :=
  \A.
    list_elim A (\z. eq (list A) (subset_list_subset A (list_to_superset A z)) (nil A))
      (refl (list A) (nil A))
      (\h. \t. \IHt. IHt)
  .

def subset_nil : (A : Type) -> (xs : list A) -> subset A (nil A) xs :=
  \A. \xs.
    existT (subset_list A) (\s. prod (eq (list A) (subset_list_superset A s) xs) (eq (list A) (subset_list_subset A s) (nil A)))
      (list_to_superset A xs)
      (prod_intro (eq (list A) (subset_list_superset A (list_to_superset A xs)) xs) (eq (list A) (subset_list_subset A (list_to_superset A xs)) (nil A))
        (list_to_from_superset A xs)
        (list_to_from_subset A xs))
  .

def insert : (A : Type) -> (A -> A -> bool) -> A -> list A -> list A :=
  \A. \lt. \x.
    list_elim A (\_. list A)
      (cons A x (nil A))
      (\h. \t. \rec.
        if (list A) (lt x h)
           (cons A x (cons A h t))
           (cons A h rec))
  .

def sort : (A : Type) -> (A -> A -> bool) -> list A -> list A :=
  \A. \lt.
    list_elim A (\_. list A)
      (nil A)
      (\h. \_. \rec. insert A lt h rec)
  .

def all : (A : Type) -> (A -> Type) -> list A -> Type :=
  \A . \P.
    list_elim A (\_. Type)
      True
      (\h. \_. \rec. prod (P h) rec)
  .

def is_true : bool -> Type := \x. eq bool x true.

def sorted : (A : Type) -> (A -> A -> bool) -> list A -> Type :=
  \A. \le.
    list_elim A (\_. Type)
      True
      (\h. \t. \rec.
        prod (all A (\x. is_true (le h x)) t) rec)
  .

def sorted_cons_intro :
    (A : Type) ->
    (le : A -> A -> bool) ->
    (h : A) ->
    (t : list A) ->
    sorted A le t ->
    all A (\x. is_true (le h x)) t ->
    sorted A le (cons A h t) :=
  \A. \le. \h. \t. \Hsorted. \Hall.
    prod_intro (all A (\x. is_true (le h x)) t) (sorted A le t)
      Hall Hsorted
  .

def transitive : (A : Type) -> (A -> A -> bool) -> Type :=
  \A. \le.
    (x y z : A) ->
    is_true (le x y) ->
    is_true (le y z) ->
    is_true (le x z).

def implies_all : (A : Type) -> (P Q : A -> Type) ->
                  ((x : A) -> P x -> Q x) ->
                  (l : list A) ->
                  all A P l ->
                  all A Q l :=
  \A. \P. \Q. \HPQ.
    list_elim A (\z. all A P z -> all A Q z)
      (\HP. I)
      (\h. \t. \IHt. \HP.
        prod_intro (Q h) (all A Q t)
          (HPQ h (fst (P h) (all A P t) HP))
          (IHt (snd (P h) (all A P t) HP)))
  .

def all_le_cons_intro :
    (A : Type) ->
    (le : A -> A -> bool) ->
    transitive A le ->
    (x h : A) ->
    (t : list A) ->
    all A (\y. is_true (le h y)) t ->
    is_true (le x h) ->
    all A (\y. is_true (le x y)) (cons A h t) :=
  \A. \le. \Htrans. \x. \h. \t. \Hall. \Hxh.
    prod_intro (is_true (le x h)) (all A (\y. is_true (le x y)) t)
      Hxh
      (implies_all A (\y. is_true (le h y)) (\y. is_true (le x y))
         (\a. \Ha : is_true (le h a). Htrans x h a Hxh Ha) t
         Hall)
  .

def all_le_insert_intro :
    (A : Type) ->
    (le : A -> A -> bool) ->
    (x i : A) ->
    is_true (le x i) ->
    (l : list A) ->
    all A (\y. is_true (le x y)) l ->
    all A (\y. is_true (le x y)) (insert A le i l) :=
  \A. \le. \x. \i. \Hxi.
    list_elim A (\z. all A (\y. is_true (le x y)) z -> all A (\y. is_true (le x y)) (insert A le i z))
      (\_. prod_intro (is_true (le x i)) True Hxi I)
      (\h. \t. \IHt. \Ht : all A (\y. is_true (le x y)) (cons A h t).
        bool_elim (\z. eq bool (le i h) z -> all A (\y. is_true (le x y)) (if (list A) z (cons A i (cons A h t)) (cons A h (insert A le i t))))
          (\Heq : is_true (le i h).
            prod_intro (is_true (le x i)) (all A (\y. is_true (le x y)) (cons A h t))
              Hxi
              (prod_intro (is_true (le x h)) (all A (\y. is_true (le x y)) t)
                (fst (is_true (le x h)) (all A (\y. is_true (le x y)) t) Ht)
                (snd (is_true (le x h)) (all A (\y. is_true (le x y)) t) Ht)))
          (\Heq.
            prod_intro (is_true (le x h)) (all A (\y. is_true (le x y)) (insert A le i t))
              (fst (is_true (le x h)) (all A (\y. is_true (le x y)) t) Ht)
              (IHt (snd (is_true (le x h)) (all A (\y. is_true (le x y)) t) Ht)))
          (le i h)
          (refl bool (le i h)))
  .


def asym : (A : Type) -> (A -> A -> bool) -> Type :=
  \A. \le.
    (x y : A) ->
    eq bool (le x y) false ->
    eq bool (le y x) true.

def insert_preserves_sorted :
    (A : Type) -> (le : A -> A -> bool) ->
    transitive A le ->
    asym A le ->
    (l : list A) ->
    sorted A le l ->
    (x : A) ->
    sorted A le (insert A le x l) :=
  \A. \le. \Htrans. \Hasym.
    list_elim A (\z. sorted A le z -> (x : A) -> sorted A le (insert A le x z))
      (\Hsort. \x. sorted_cons_intro A le x (nil A) Hsort I)
      (\h. \t. \IHt. \Hsort : sorted A le (cons A h t). \x.
        bool_elim (\z. eq bool (le x h) z -> sorted A le (if (list A) z (cons A x (cons A h t)) (cons A h (insert A le x t))))
          (\Heq : is_true (le x h). sorted_cons_intro A le x (cons A h t) Hsort (all_le_cons_intro A le Htrans x h t (fst (all A (\y. is_true (le h y)) t) (sorted A le t) Hsort) Heq))
          (\Heq. prod_intro (all A (\y. is_true (le h y)) (insert A le x t)) (sorted A le (insert A le x t))
                   (all_le_insert_intro A le h x (Hasym x h Heq) t (fst (all A (\x. is_true (le h x)) t) (sorted A le t) Hsort))
                   (IHt (snd (all A (\x. is_true (le h x)) t) (sorted A le t) Hsort) x))
          (le x h)
          (refl bool (le x h)))
  .

def sort_sorted :
    (A : Type) -> (le : A -> A -> bool) ->
    transitive A le ->
    asym A le ->
    (l : list A) ->
    sorted A le (sort A le l) :=
  \A. \le. \Htrans. \Hasym.
    list_elim A (\z. sorted A le (sort A le z))
      I
      (\h. \t. \IHt.
        insert_preserves_sorted A le Htrans Hasym (sort A le t) IHt h)
  .

data perm (A : Type) : list A -> list A -> Type :=
| perm_nil : perm A (nil A) (nil A)
| perm_skip : (x : A) -> (xs ys : list A) -> perm A xs ys -> perm A (cons A x xs) (cons A x ys)
| perm_swap : (x y : A) -> (xs : list A) ->
              perm A (cons A x (cons A y xs)) (cons A y (cons A x xs))
| perm_trans : (xs ys zs : list A) -> perm A xs ys -> perm A ys zs -> perm A xs zs.

def perm_refl : (A : Type) -> (l : list A) -> perm A l l :=
  \A.
    list_elim A (\z. perm A z z)
      (perm_nil A)
      (\h. \t. \IHt : perm A t t. perm_skip A h t t IHt)
  .


def perm_swap_strong : (A : Type) -> (x y : A) -> (xs ys : list A) ->
                       perm A xs ys ->
                       perm A (cons A x (cons A y xs))
                              (cons A y (cons A x ys)) :=
  \A. \x. \y. \xs. \ys. \H.
    perm_trans A (cons A x (cons A y xs)) (cons A x (cons A y ys)) (cons A y (cons A x ys))
      (perm_skip A x (cons A y xs) (cons A y ys)
        (perm_skip A y xs ys H))
      (perm_swap A x y ys)
  .


def insert_perm : (A : Type) -> (le : A -> A -> bool) ->
                  (a : A) -> (l : list A) ->
                  perm A (cons A a l) (insert A le a l) :=
  \A. \le. \a.
    list_elim A (\z. perm A (cons A a z) (insert A le a z))
      (perm_skip A a (nil A) (nil A) (perm_nil A))
      (\x. \xs. \IHxs : perm A (cons A a xs) (insert A le a xs).
        bool_elim (\z.
                    (perm A (cons A a (cons A x xs))
                      (if (list A) z
                        (cons A a (cons A x xs))
                        (cons A x (insert A le a xs)))))
          (perm_refl A (cons A a (cons A x xs)))
          (perm_trans A (cons A a (cons A x xs))
                        (cons A x (cons A a xs))
                        (cons A x (insert A le a xs))
            (perm_swap A a x xs)
            (perm_skip A x (cons A a xs) (insert A le a xs) IHxs))
          (le a x))
  .

def insert_preserves_perm : (A : Type) -> (le : A -> A -> bool) ->
                            (a : A) -> (xs ys : list A) ->
                            perm A xs ys ->
                            perm A (insert A le a xs) (insert A le a ys) :=
  \A. \le. \a.
    perm_elim A (\z. \w. \_. perm A (insert A le a z) (insert A le a w))
      (perm_skip A a (nil A) (nil A) (perm_nil A))
      (\x. \xs. \ys. \Hxsys : perm A xs ys.
       \H : perm A (insert A le a xs) (insert A le a ys).
         bool_elim (\z.
           (perm A (if (list A) z
                       (cons A a (cons A x xs))
                       (cons A x (insert A le a xs)))
                   (if (list A) z
                       (cons A a (cons A x ys))
                       (cons A x (insert A le a ys)))))
           (perm_skip A a (cons A x xs) (cons A x ys)
             (perm_skip A x xs ys Hxsys))
           (perm_skip A x (insert A le a xs) (insert A le a ys) H)
           (le a x))
      (\x. \y. \xs.
        bool_elim
          (\z.
             (perm A
                (if (list A) z
                  (cons A a (cons A x (cons A y xs)))
                  (cons A x
                    (if (list A) (le a y)
                      (cons A a (cons A y xs))
                      (cons A y (insert A le a xs)))))
                (if (list A) (le a y)
                  (cons A a (cons A y (cons A x xs)))
                  (cons A y
                    (if (list A) z
                      (cons A a (cons A x xs))
                      (cons A x (insert A le a xs)))))))
        (bool_elim
          (\z.
            (perm A
                (cons A a (cons A x (cons A y xs)))
              (if (list A) z
                (cons A a (cons A y (cons A x xs)))
                (cons A y (cons A a (cons A x xs))))))
          (perm_skip A a (cons A x (cons A y xs)) (cons A y (cons A x xs))
            (perm_swap A x y xs))
          (perm_trans A
            (cons A a (cons A x (cons A y xs)))
            (cons A a (cons A y (cons A x xs)))
            (cons A y (cons A a (cons A x xs)))
            (perm_skip A a (cons A x (cons A y xs)) (cons A y (cons A x xs))
              (perm_swap A x y xs))
            (perm_swap A a y (cons A x xs)))
          (le a y))
        (bool_elim
          (\z.
            (perm A
              (cons A x
                (if (list A) z
                  (cons A a (cons A y xs))
                  (cons A y (insert A le a xs))))
              (if (list A) z
                (cons A a (cons A y (cons A x xs)))
                (cons A y (cons A x (insert A le a xs))))))
          (perm_trans A
            (cons A x (cons A a (cons A y xs)))
            (cons A a (cons A x (cons A y xs)))
            (cons A a (cons A y (cons A x xs)))
            (perm_swap A x a (cons A y xs))
            (perm_skip A a (cons A x (cons A y xs)) (cons A y (cons A x xs))
              (perm_swap A x y xs)))
          (perm_swap A x y (insert A le a xs))
          (le a y))
        (le a x))
      (\xs. \ys. \zs. \Hxsys. \IHxsys. \Hyszs. \IHyszs.
        perm_trans A
          (insert A le a xs)
          (insert A le a ys)
          (insert A le a zs)
          IHxsys
          IHyszs)
  .


def sort_perm : (A : Type) -> (le : A -> A -> bool) -> (l : list A) ->
                perm A l (sort A le l) :=
  \A. \le.
    list_elim A (\z. perm A z (sort A le z))
      (perm_nil A)
      (\h. \t. \IHt : perm A t (sort A le t).
        perm_trans A
          (cons A h t)
          (insert A le h t)
          (insert A le h (sort A le t))
          (insert_perm A le h t)
          (insert_preserves_perm A le h t (sort A le t) IHt))
  .
def perm_of_nil_help :
    (A : Type) -> (xs ys : list A) ->
    perm A xs ys ->
    eq (list A) ys (nil A) ->
    eq (list A) xs (nil A) :=
  \A.
    perm_elim A (\z. \w. \_. eq (list A) w (nil A) -> eq (list A) z (nil A))
      (\H. refl (list A) (nil A))
      (\x. \xs. \ys. \_. \_. \H : eq (list A) (cons A x ys) (nil A).
        exfalso
          (cons_nil_inv A x ys H)
          (eq (list A) (cons A x xs) (nil A)))
      (\x. \y. \l. \H : eq (list A) (cons A y (cons A x l)) (nil A).
        exfalso
          (cons_nil_inv A y (cons A x l) H)
          (eq (list A) (cons A x (cons A y l)) (nil A)))
      (\xs. \ys. \zs.
        \_. \IHxsys : eq (list A) ys (nil A) -> eq (list A) xs (nil A).
        \_. \IHyszs : eq (list A) zs (nil A) -> eq (list A) ys (nil A).
        \H : eq (list A) zs (nil A).
          IHxsys (IHyszs H))
  .


def perm_of_nil : (A : Type) -> (l : list A) ->
                  perm A l (nil A) ->
                  eq (list A) l (nil A) :=
  \A. \l. \H.
    perm_of_nil_help A l (nil A) H (refl (list A) (nil A))
  .

def sort_not_nil : (A : Type) -> (le : A -> A -> bool) ->
                   (l : list A) ->
                   (eq (list A) l (nil A) -> False) ->
                   eq (list A) (sort A le l) (nil A) -> False :=
  \A. \le. \l. \Hl. \H.
    (Hl
      (perm_of_nil A l
        (subst (list A) (\z. perm A l z)
          (sort A le l)
          (sort_perm A le l)
          (nil A)
          H)))
  .

def perm_sym : (A : Type) -> (xs ys : list A) ->
               perm A xs ys ->
               perm A ys xs :=
  \A.
    perm_elim A (\z. \w. \_. perm A w z)
      (perm_nil A)
      (\x. \xs. \ys. \_. \IH : perm A ys xs.
        perm_skip A x ys xs IH)
      (\x. \y. \l. perm_swap A y x l)
      (\xs. \ys. \zs.
       \_. \IHxsys : perm A ys xs.
       \_. \IHyszs : perm A zs ys.
       perm_trans A zs ys xs IHyszs IHxsys)
  .

def map_perm :
    (A B : Type) -> (f : A -> B) ->
    (xs ys : list A) -> perm A xs ys ->
    perm B (map A B f xs) (map A B f ys) :=
  \A. \B. \f.
    perm_elim A (\z. \w. \_. perm B (map A B f z) (map A B f w))
      (perm_nil B)
      (\x. \xs. \ys. \H : perm A xs ys. \IH : perm B (map A B f xs) (map A B f ys).
        perm_skip B (f x) (map A B f xs) (map A B f ys) IH)
      (\x. \y. \l.
        perm_swap B (f x) (f y) (map A B f l))
      (\xs. \ys. \zs.
       \_. \IHxsys.
       \_. \IHyszs.
         perm_trans B (map A B f xs) (map A B f ys) (map A B f zs) IHxsys IHyszs)
  .
