import axiomatic_equality.

data nat := O | S : nat -> nat.

def plus : nat -> nat -> nat :=
    \n. \m.
      nat_elim (\x. nat) m (\x. \y. S y) n.

check (\n : nat. plus O n).
simpl (\n : nat. plus O n).


check ((n : nat) -> eq _ (plus O n) O).
simpl ((n : nat) -> eq _ (plus O n) O).

def plus_O_n : (n : nat) -> eq _ (plus O n) n :=
    \n. refl _ n.

check subst.

axiom admit : (A : Type) -> A.

check nat_elim.

def plus_n_O : (n : nat) -> eq _ (plus n O) n :=
     \n. nat_elim (\x. eq _ (plus x O) x)
                  (refl _ O)
                  (\x. \IH : eq _ (plus x O) x. f_equal _ _ S _ _ IH)
                  n.

def plus_n_S : (n : nat) -> (m : nat) -> eq _ (plus n (S m)) (S (plus n m)) :=
    \n. \m.
        nat_elim (\x. eq _ (plus x (S m)) (S (plus x m)))
                 (refl _ (S m))
                 (\x. \IH : eq _ (plus x (S m)) (S (plus x m)).
                   f_equal _ _ S _ _ IH)
                 n.

def plus_comm : (n : nat) -> (m : nat) -> eq nat (plus n m) (plus m n) :=
    \n. nat_elim (\x. (m : nat) -> eq _ (plus x m) (plus m x))
                 (\m. eq_sym _ _ _ (plus_n_O m))
                 (\x. \IH : (m : nat) -> eq _ (plus x m) (plus m x).
                     \m. eq_trans _ _ _ _
                                  (f_equal _ _ S _ _ (IH m))
                                  (eq_sym _ _ _ (plus_n_S m x)))
                 n.

def plus_assoc : (a : nat) -> (b : nat) -> (c : nat) -> 
                 eq _ (plus (plus a b) c) (plus a (plus b c)) :=
    \a. \b. \c.
      nat_elim (\x. eq _ (plus (plus x b) c) (plus x (plus b c)))
               (refl _ (plus b c))
               (\x. \IH. f_equal _ _ S (plus (plus x b) c) (plus x (plus b c)) IH)
               a.

def mult : nat -> nat -> nat :=
  \n. \m.
     nat_elim (\_.nat) O (\_. \y. plus m y) n.

def mult_n_O : (n : nat) -> eq _ (mult n O) O :=
  \n. nat_elim (\x. eq _ (mult x O) O)
               (refl _ O)
               (\x. \IH. IH)
               n.

def lemma : (a : nat) -> (b : nat) -> (c : nat) ->
             eq _ (plus a (plus b c))
                  (plus b (plus a c)) :=
  \a. \b. \c.
    subst _
          (\z. eq _ z (plus b (plus a c)))
          _
          (rewrite _
                   (\z. eq _ (plus z c) (plus b (plus a c)))
                   _
                   (plus_assoc b a c)
                   _
                   (plus_comm a b))
          _
          (plus_assoc a b c).


def mult_n_S : (n : nat) -> (m : nat) -> eq _ (mult n (S m)) (plus n (mult n m)) :=
  \n. \m.
     nat_elim (\x. eq _ (mult x (S m)) (plus x (mult x m)))
     	      (refl _ O)
	      (\x. \IH : eq _ (mult x (S m)) (plus x (mult x m)).
                  f_equal _ _ S _ _
                    (rewrite _
                             (\z. eq nat (plus m z) (plus x (plus m (mult x m))))
                             _
                             (lemma _ _ _)
                             _
                             IH))
	      n.