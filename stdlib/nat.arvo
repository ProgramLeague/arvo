import axiomatic_equality.

data nat := O | S : nat -> nat.

def plus : nat -> nat -> nat :=
    \n. \m.
      nat_elim (\_. nat) m (\_. \y. S y) n.

check (\n : nat. plus O n).
simpl (\n : nat. plus O n).


check ((n : nat) -> eq nat (plus O n) O).
simpl ((n : nat) -> eq nat (plus O n) O).

def plus_O_n : (n : nat) -> eq nat (plus O n) n :=
    \n. refl nat n.

check subst.

axiom admit : (A : Type) -> A.

check nat_elim.

def plus_n_O : (n : nat) -> eq nat (plus n O) n :=
     \n. nat_elim (\x. eq nat (plus x O) x)
                  (refl nat O)
                  (\x. \IH. f_equal nat nat S (plus x O) x IH)
                  n.

def plus_n_S : (n : nat) -> (m : nat) -> eq nat (plus n (S m)) (S (plus n m)) :=
    \n. \m.
        nat_elim (\x. eq nat (plus x (S m)) (S (plus x m)))
                 (refl nat (S m))
                 (\x. \IH : eq nat (plus x (S m)) (S (plus x m)).
                   f_equal nat nat S (plus x (S m)) (S (plus x m)) IH)
                 n.

def plus_comm : (n : nat) -> (m : nat) -> eq nat (plus n m) (plus m n) :=
    \n. nat_elim (\x. (m : nat) -> eq nat (plus x m) (plus m x))
                 (\m. eq_sym nat (plus m O) (plus O m) (plus_n_O m))
                 (\x. \IH.
                     \m. eq_trans nat (plus (S x) m) (S (plus m x)) (plus m (S x))
                                  (f_equal nat nat S (plus x m) (plus m x) (IH m))
                                  (eq_sym nat (plus m (S x)) (S (plus m x))
                                          (plus_n_S m x)))
                 n.

def plus_assoc : (a : nat) -> (b : nat) -> (c : nat) -> eq nat (plus (plus a b) c) (plus a (plus b c)) :=
    \a. \b. \c.
      nat_elim (\x. eq nat (plus (plus x b) c) (plus x (plus b c)))
               (refl nat (plus b c))
               (\x. \IH. f_equal nat nat S (plus (plus x b) c) (plus x (plus b c)) IH)
               a.

def mult : nat -> nat -> nat :=
  \n. \m.
     nat_elim (\_.nat) O (\_. \y. plus m y) n.

def mult_n_O : (n : nat) -> eq nat (mult n O) O :=
  \n. nat_elim (\x. eq nat (mult x O) O)
      	       (refl nat O)
	       (\x. \IH : eq nat (mult x O) O. IH)
	       n.


def lemma : (a : nat) -> (b : nat) -> (c : nat) ->
             eq nat (plus a (plus b c))
                    (plus b (plus a c)) :=
  \a. \b. \c.
    subst nat
          (\z. eq nat z (plus b (plus a c)))
          (plus (plus a b) c)
          (rewrite nat
                   (\z. eq nat (plus z c) (plus b (plus a c)))
                   (plus b a)
                   (plus_assoc b a c)
                   (plus a b)
                   (plus_comm a b))
          (plus a (plus b c))
          (plus_assoc a b c).


def mult_n_S : (n : nat) -> (m : nat) -> eq nat (mult n (S m)) (plus n (mult n m)) :=
  \n. \m.
     nat_elim (\x. eq nat (mult x (S m)) (plus x (mult x m)))
     	      (refl nat O)
	      (\x. \IH : eq nat (mult x (S m)) (plus x (mult x m)).
                   subst nat
                         (\z. eq nat (mult (S x) (S m)) z)
                         (plus m (plus (S x) (mult x m)))
                         (rewrite nat
                                  (\z. eq nat (S (plus m z)) (plus m (S (plus x (mult x m)))))
                                  (plus x (mult x m))
                                  (eq_sym nat
                                    (plus m (S (plus x (mult x m))))
                                    (S (plus m (plus x (mult x m))))
                                    (plus_n_S m (plus x (mult x m))))
                                  (mult x (S m))
                                  IH)
                         (plus (S x) (plus m (mult x m)))
                         (rewrite nat
                                  (\z. eq nat z
                                              (S (plus x (plus m (mult x m)))))
                                  (S (plus m (plus x (mult x m))))
                                  (f_equal nat nat S
                                    (plus m (plus x (mult x m)))
                                    (plus x (plus m (mult x m)))
                                    (lemma m x (mult x m)))
                                  (plus m (S (plus x (mult x m))))
                                  (plus_n_S m (plus x (mult x m)))))
	      n.