import axiomatic_equality.

data nat := O | S : nat -> nat.

def plus : nat -> nat -> nat :=
    \n. \m.
      nat_elim (\_. nat) m (\_. \y. S y) n.

check (\n : nat. plus O n).
simpl (\n : nat. plus O n).


check ((n : nat) -> eq nat (plus O n) O).
simpl ((n : nat) -> eq nat (plus O n) O).

def plus_O_n : (n : nat) -> eq nat (plus O n) n :=
    \n. refl nat n.

check subst.

axiom admit : (A : Type) -> A.

check nat_elim.

def plus_n_O : (n : nat) -> eq nat (plus n O) n :=
     \n. nat_elim (\x. eq nat (plus x O) x)
                  (refl nat O)
                  (\x. \IH. f_equal nat nat S (plus x O) x IH)
                  n.

def plus_n_S : (n : nat) -> (m : nat) -> eq nat (plus n (S m)) (S (plus n m)) :=
    \n. \m.
        nat_elim (\x. eq nat (plus x (S m)) (S (plus x m)))
                 (refl nat (S m))
                 (\x. \IH : eq nat (plus x (S m)) (S (plus x m)).
                   f_equal nat nat S (plus x (S m)) (S (plus x m)) IH)
                 n.

def plus_comm : (n : nat) -> (m : nat) -> eq nat (plus n m) (plus m n) :=
    \n. nat_elim (\x. (m : nat) -> eq nat (plus x m) (plus m x))
                 (\m. eq_sym nat (plus m O) (plus O m) (plus_n_O m))
                 (\x. \IH.
                     \m. eq_trans nat (plus (S x) m) (S (plus m x)) (plus m (S x))
                                  (f_equal nat nat S (plus x m) (plus m x) (IH m))
                                  (eq_sym nat (plus m (S x)) (S (plus m x))
                                          (plus_n_S m x)))
                 n.

